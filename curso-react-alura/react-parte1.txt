
https://pt-br.reactjs.org/docs/components-and-props.html

*** AULA01
Criando um projeto do zero.
1) Crie um diretório para seu projeto.

2) Abra esse diretório no terminal do seu sistema operacional e rode o comando abaixo:

npm install create-react-app
3) Após a instalação, crie o projeto executando a linha:

npx create-react-app react-alura
4) Feito isso, entre no diretório criado pela ferramenta e então execute:

npm start

*** AULA02 - Usando componentes
Arrow function (pega o this da sua criação e mantém até o final, o escope é lexico, não muda)
O this de uma arrow function é léxico, enquanto o this de uma função padrão é dinâmico.
ex:
model => this._controller.update();
(model, param2) => {
    console.log(model);
    console.log(param2);
}

exemplo 2 com explicação:
<script>
    let carro = {
        velocidade: 100,
        acelera :function() {
            console.log(this);
            console.log(`Carro a ${this.velocidade} km por hora!`);
        }
    };
    carro.acelera();
</script>

Como escrevemos nosso código dentro da tag script, não estamos dentro de um método ou de outra função, estamos no escopo de window, ou seja, o escopo global. Lembre-se que o this de uma arrow function é léxico, isto é, estático e pega emprestado seu valor do ambiente no qual foi declarado. Como o this naquele ponto em que a arrow function foi declarada é window, seu valor será window.

Nesta aula, aprendemos:

Criar um Class componente no React
Criar sub-componentes internos como Function Component
Comunicação entre componentes utilizando props.

*** AULA03 - Entendendo o state 
* Diferença state x props
State: Serve para guardar valores/estado que podem vir a mudar com a interação do usuário com o componente, tendo efeito na renderização do mesmo, o state pode ser passado como props!
Props: Valores para a configuração de um componente, essas props são passadas pelo elemento acima (que utiliza o componente que irá receber) e são imutáveis, utilizado para a comunicação de componentes.
Alternativa correta! Esse é justamente o uso desses dois objetos, Props para configuração de componentes e State armazenando estado/valores!

Sempre que alteramos/atualizamos o State, o componente é redesenhado na tela (render)


Alternativa correta! A alteração/atualização do estado de um componente (state) desencadeia o redesenho do mesmo!
Devemos alterar/atualizar o state utilizando o método setState() do React.
Alternativa correta! Esse é o método proprietário do React para que modifiquemos o State.

* React hooks
A recente atualização do React 16.8 trouxe a possibilidade de utilizarmos state em function components.

A forma de fazer isso é utilizando o useState, lembrando que temos que importá-lo conforme abaixo:

import React, {useState} from 'react';
O useState nos retorna o state atual e uma função que deve ser utilizada para atualizar esse estado, e recebe o estado inicial do componente.
ver ContaClicks.js 

Nesta aula, aprendemos:

Trabalhar com state
Método setState()
Comportamento ao se alterar o state
Método de remoção com filter
